name: Release

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (e.g., v1.2.3) - overrides bump_type'
        required: false
        type: string

permissions:
  contents: write

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Run tests
      run: make test

    - name: Run property-based tests
      run: make test-rapid

  release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Find latest semantic tag
      id: find_tag
      run: |
        # Look for existing semantic version tags first
        SEMANTIC_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -1 || echo "")

        if [ -n "$SEMANTIC_TAG" ]; then
          echo "Found existing semantic tag: $SEMANTIC_TAG"
          echo "baseline_tag=$SEMANTIC_TAG" >> $GITHUB_OUTPUT
        else
          # No semantic tags found, check if we have any tags at all
          ANY_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -n "$ANY_TAG" ]; then
            echo "Found non-semantic tag: $ANY_TAG"
            echo "This appears to be the first semantic release migration."
            echo "baseline_tag=v0.0.0" >> $GITHUB_OUTPUT
          else
            echo "No tags found, starting from v0.0.0"
            echo "baseline_tag=v0.0.0" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Analyze commits for version bump
      id: analyze_commits
      run: |
        BUMP="patch"  # default

        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            echo "version_bump=custom" >> $GITHUB_OUTPUT
            echo "Using custom version from input"
            exit 0
          elif [ "${{ github.event.inputs.bump_type }}" != "auto" ]; then
            BUMP="${{ github.event.inputs.bump_type }}"
            echo "Using manual bump type: $BUMP"
          fi
        fi

        if [ "$BUMP" = "patch" ]; then
          # Check commit messages since last tag for version bump indicators
          BASELINE="${{ steps.find_tag.outputs.baseline_tag }}"
          COMMITS=$(git log ${BASELINE}..HEAD --oneline --no-merges 2>/dev/null || git log --oneline --no-merges)

          if echo "$COMMITS" | grep -qi "major update\|breaking change\|BREAKING CHANGE"; then
            BUMP="major"
            echo "🔥 Major update detected in commit messages"
          elif echo "$COMMITS" | grep -qi "minor update\|feat\|feature"; then
            BUMP="minor"
            echo "✨ Minor update detected in commit messages"
          else
            echo "🐛 Patch update (default)"
          fi
        fi

        echo "version_bump=$BUMP" >> $GITHUB_OUTPUT
        echo "Final version bump: $BUMP"

    - name: Compute next version
      id: compute_version
      run: |
        BASELINE="${{ steps.find_tag.outputs.baseline_tag }}"
        BUMP="${{ steps.analyze_commits.outputs.version_bump }}"

        if [ "$BUMP" = "custom" ]; then
          NEXT_VERSION="${{ github.event.inputs.custom_version }}"
          # Ensure it starts with 'v'
          if [[ ! "$NEXT_VERSION" =~ ^v ]]; then
            NEXT_VERSION="v$NEXT_VERSION"
          fi
        else
          # Remove 'v' prefix for calculation
          CURRENT=${BASELINE#v}

          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"

          # Bump version based on type
          case $BUMP in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEXT_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        fi

        echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
        echo "🏷️ Next version: $NEXT_VERSION (from: $BASELINE)"

    - name: Create release notes
      id: create_notes
      run: |
        BASELINE="${{ steps.find_tag.outputs.baseline_tag }}"
        NEXT_VERSION="${{ steps.compute_version.outputs.next_version }}"

        # Determine commit range for release notes
        if [ "$BASELINE" = "v0.0.0" ]; then
          # First semantic release - check if we have any existing tags
          EXISTING=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -n "$EXISTING" ] && [[ ! "$EXISTING" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # We have non-semantic tags, get commits since the latest one
            echo "📝 Generating notes since last non-semantic tag: $EXISTING"
            COMMITS=$(git log ${EXISTING}..HEAD --oneline --no-merges --reverse)
            MIGRATION="This is the first semantic version release, migrating from timestamp-based versioning."
          else
            # No tags at all, get all commits
            echo "📝 Generating notes for initial release"
            COMMITS=$(git log --oneline --no-merges --reverse)
            MIGRATION="Initial release of Imposter Mock Server with semantic versioning."
          fi
        else
          # Normal semantic version increment
          echo "📝 Generating notes since: $BASELINE"
          COMMITS=$(git log ${BASELINE}..HEAD --oneline --no-merges --reverse)
          MIGRATION=""
        fi

        # Start building notes
        {
          echo "## 🎭 Imposters $NEXT_VERSION"

          # Add migration note if this is the first semantic release
          if [ -n "$MIGRATION" ]; then
            echo ""
            echo "> **Note:** $MIGRATION"
            echo ""
          fi

          echo ""
          echo "### What's New"

          # Process commits into categorized changes
          echo "$COMMITS" | while read -r commit; do
            if echo "$commit" | grep -qi "feat\|feature\|add\|new"; then
              echo "- ✨ ${commit#* }"
            elif echo "$commit" | grep -qi "fix\|bug\|patch"; then
              echo "- 🐛 ${commit#* }"
            elif echo "$commit" | grep -qi "update\|improve\|enhance"; then
              echo "- ⚡ ${commit#* }"
            elif echo "$commit" | grep -qi "doc\|readme"; then
              echo "- 📚 ${commit#* }"
            elif echo "$commit" | grep -qi "test"; then
              echo "- 🧪 ${commit#* }"
            elif echo "$commit" | grep -qi "refactor\|clean"; then
              echo "- ♻️ ${commit#* }"
            else
              echo "- 🔧 ${commit#* }"
            fi
          done

          echo ""
          echo "### 📥 Quick Install"
          echo ""
          echo "**Linux/macOS:**"
          echo '```bash'
          echo "# Download and install (replace with your platform)"
          echo "curl -L https://github.com/eliraz-refael/imposters/releases/download/$NEXT_VERSION/imposter-linux-amd64 -o imposter"
          echo "chmod +x imposter"
          echo "sudo mv imposter /usr/local/bin/"
          echo '```'
          echo ""
          echo "**Windows:**"
          echo "Download \`imposter-windows-amd64.exe\` and add to your PATH."
          echo ""
          echo "### 🎯 Quick Start"
          echo '```bash'
          echo "# Start the mock server"
          echo "imposter --port 3001 --name my-service-mock"
          echo ""
          echo "# Add a mock route"
          echo 'curl -X POST http://localhost:3001/admin/routes \'
          echo '  -H "Content-Type: application/json" \'
          echo '  -d '\''{'
          echo '    "path": "/users/{id}",'
          echo '    "method": "GET",'
          echo '    "response": {"status": 200, "body": {"id": "{{id}}", "name": "Mock User"}}'
          echo '  }'\'''
          echo ""
          echo "# Test the mock"
          echo "curl http://localhost:3001/users/123"
          echo '```'
          echo ""
          echo "### 🔧 Supported Platforms"
          echo "- Linux (amd64, arm64)"
          echo "- macOS (amd64, arm64)"
          echo "- Windows (amd64, arm64)"
          echo ""
          echo "### ✨ Features"
          echo "- 🎭 Dynamic route configuration via REST API"
          echo "- 🔀 Path parameter substitution"
          echo "- ⏱️ Configurable response delays"
          echo "- 📝 Custom response headers"
          echo "- 🧪 Property-based testing"
          echo "- 📊 Structured logging"
          echo ""
          echo "### 📝 Full Documentation"
          echo "See the [README](https://github.com/eliraz-refael/imposters#readme) for complete usage instructions."
          echo ""
          echo "---"
          echo "**Commit:** ${{ github.sha }}"
        } > notes.md

        # Output for GitHub release
        {
          echo "content<<NOTES_EOF"
          cat notes.md
          echo "NOTES_EOF"
        } >> $GITHUB_OUTPUT

    - name: Build binaries
      run: |
        mkdir -p dist

        platforms=(
          "linux/amd64"
          "linux/arm64"
          "darwin/amd64"
          "darwin/arm64"
          "windows/amd64"
          "windows/arm64"
        )

        for platform in "${platforms[@]}"; do
          IFS='/' read -r GOOS GOARCH <<< "$platform"

          binary_name="imposter-${GOOS}-${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            binary_name="${binary_name}.exe"
          fi

          echo "Building for $GOOS/$GOARCH..."

          env GOOS="$GOOS" GOARCH="$GOARCH" CGO_ENABLED=0 \
            go build -ldflags="-w -s -X main.version=${{ steps.compute_version.outputs.next_version }} -X main.buildTime=$(date -u '+%Y-%m-%d_%H:%M:%S') -X main.gitCommit=${{ github.sha }}" \
            -o "dist/$binary_name" cmd/imposter/main.go

          cd dist
          sha256sum "$binary_name" > "$binary_name.sha256"
          cd ..
        done

    - name: Publish release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.compute_version.outputs.next_version }}
        name: Imposters ${{ steps.compute_version.outputs.next_version }}
        body: ${{ steps.create_notes.outputs.content }}
        files: |
          dist/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Summary
      run: |
        echo "🎉 Successfully released Imposters ${{ steps.compute_version.outputs.next_version }}"
        echo "📝 Release notes generated from commits since ${{ steps.find_tag.outputs.baseline_tag }}"
        echo "🔗 Release URL: https://github.com/eliraz-refael/imposters/releases/tag/${{ steps.compute_version.outputs.next_version }}"
